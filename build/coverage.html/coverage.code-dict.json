{"/home/travis/build/npmtest/node-npmtest-npm-license/test.js":"/* istanbul instrument in package npmtest_npm_license */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-license/lib.npmtest_npm_license.js":"/* istanbul instrument in package npmtest_npm_license */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_license = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_license = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-license/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-license && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_license */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_license\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_license.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_license.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_license.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_license.__dirname + '/lib.npmtest_npm_license.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-license/node_modules/npm-license/lib/index.js":"\n/*\nCopyright (c) 2013, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\n\nvar UNKNOWN = 'UNKNOWN';\nvar read = require('read-installed');\nvar treeify = require('treeify');\nvar fs = require('fs');\nvar _ = require('underscore');\nvar packageLicense = require('package-license');\n\nvar flatten = function(data, unversioned, json, options) {\n    if (!json.name || !json.version){   // in case dependencies were were empty\n        return;\n    }\n    if (data[json.name + '@' + json.version]){ // prevent circular\n        return;\n    }\n    if (json.extraneous){ // filter out root devDependencies and manually installed packages\n        return;\n    }\n\n    var moduleInfo = unversioned[json.name] || {licenses: UNKNOWN};\n    var moduleId;\n\n    data[json.name + '@' + json.version] = moduleInfo;\n\n    if (!unversioned[json.name]) {\n        if (json.repository && typeof json.repository === 'object' && typeof json.repository.url === 'string') {\n            moduleInfo.repository = json.repository.url\n                .replace('git+ssh://git@', 'git://')\n                .replace('git+https://github.com', 'https://github.com')\n                .replace('git://github.com', 'https://github.com')\n                .replace('git@github.com:', 'https://github.com/')\n                .replace('.git', '');\n        }\n        if (json.url && typeof json.url === 'object') moduleInfo.url = json.url.web;\n\n        var licenseData = json.license || json.licenses || undefined;\n        if (licenseData) {\n            if (Array.isArray(licenseData) && licenseData.length > 0) {\n                moduleInfo.licenses = licenseData.map(function(license){\n                    if (typeof license === 'object')  return license.type\n                    else if (typeof license === 'string') return license;\n                });\n            } else if (typeof licenseData === 'object' && licenseData.type) {\n                moduleInfo.licenses = licenseData.type;\n            } else if (typeof licenseData === 'string') {\n                moduleInfo.licenses = licenseData;\n            }\n        } else {\n            moduleInfo.licenses = packageLicense(json.path);\n        }\n    }\n\n    options.include.forEach(function(dependencyType){\n        if (json[dependencyType]) {\n            Object.keys(json[dependencyType]).forEach(function(moduleName) {\n                // special check for dependencyType === 'dependencies' which contains ALL types actually\n                if (dependencyType === 'dependencies'){\n                    if ((json.devDependencies && json.devDependencies[moduleName])\n                        || (json.optionalDependencies && json.optionalDependencies[moduleName])\n                        || (json.peerDependencies && json.peerDependencies[moduleName])){\n                        return;\n                    }\n                }\n                if (json[dependencyType] && json[dependencyType][moduleName]){\n                    var childDependency = json.dependencies[moduleName];\n                    if (childDependency){\n                        flatten(data, unversioned, childDependency, options);\n                    } \n                }\n            });\n        }\n    });\n\n};\n\nexports.init = function(options, callback) {\n\n    var defaults = {\n        start: '.',\n        unknown: false,\n        depth: 'all', \n        include: 'dependencies',\n        meta: null\n    };\n    var data = {};\n    var unversioned = {}; \n\n    options = _.extend(defaults, options);\n\n    if (typeof options.meta === 'string'){\n        var meta = require(process.cwd() + '/' + options.meta);\n        var mapToUse = data;\n        for (var moduleKey in meta){\n            if (moduleKey.indexOf('@') > -1){\n                mapToUse = data;\n            } else {\n                mapToUse = unversioned;\n            }\n            if (typeof meta[moduleKey] === 'string'){\n                mapToUse[moduleKey] = {licenses: meta[moduleKey]};\n            }\n            else if (typeof meta[moduleKey] === 'object')\n                mapToUse[moduleKey] = meta[moduleKey];\n        }\n    }\n\n    if (typeof options.include === 'string') {\n        if (options.include === 'all'){\n            options.include = ['dependencies','devDependencies','bundledDependencies','bundleDependencies','optionalDependencies','peerDependencies']\n        } else{\n            options.include = [options.include]; \n        }\n    }\n    \n    var opt = {\n        depth: options.depth,\n        dev: options.include.indexOf('devDependencies') != -1,\n    }\n    \n    read(options.start, opt, function(err, json) {\n        flatten(data, unversioned, json, options);\n        var sorted = {};\n        Object.keys(data).sort().forEach(function(item) {\n            if (options.unknown && data[item].licenses !== UNKNOWN && data[item].licenses.indexOf('*') === -1)\n                delete data[item];\n            if (data[item]) sorted[item] = data[item];\n        });\n        callback(sorted);\n    });\n};\n\nexports.print = function(sorted, format) {\n    if (format === \"json\"){\n        console.log(JSON.stringify(sorted));\n    } else{\n        console.log(treeify.asTree(sorted, true));\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-npm-license/node_modules/npm-license/lib/args.js":"/*\nCopyright (c) 2013, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\n\nvar nopt = require('nopt'),\n    noptUsage = require(\"nopt-usage\"),\n    known = {\n        json: require('path'),\n        unknown: Boolean,\n        version: Boolean,\n        start: String,\n        export: String,\n        help: Boolean,\n        depth: Number,\n        include: String,\n    },\n    shorts = {\n        \"e\" : [\"--export\"],\n        \"v\" : [\"--version\"],\n        \"h\" : [\"--help\"]\n    },\n    description = {\n        \"json\" : \"Path to be scanned\",\n        \"version\" : \"Show the current version\",\n        \"export\" : \"Export format, 'tree' or 'json'\",\n        \"help\" : \"This help\",\n        \"include\": \"Set this to dependencies or devDependencies\",\n        \"start\": \"Path to the npm project directory\",\n    },\n    defaults = {\n        \"json\" : \".\",\n        \"version\" : false,\n        \"export\" : \"tree\",\n        \"help\" : false,\n        \"include\": \"dependencies\",\n        \"start\": process.cwd(),\n    };\n\n\nvar raw = function (args) {\n    var parsed = nopt(known, shorts, (args || process.argv));\n    return parsed;\n};\n\nvar usage = function () {\n    return noptUsage(known, shorts, description, defaults);\n};\n\nvar has = function (a) {\n    var cooked = raw().argv.cooked,\n        ret = false;\n\n    cooked.forEach(function (o) {\n        if ((o === '--' + a) || (o === '--no-' + a)) {\n            ret = true;\n        }\n    });\n\n    return ret;\n};\n\nvar clean = function(args) {\n    var parsed = raw(args);    \n    delete parsed.argv;\n    return parsed;\n};\n\nvar setDefaults = function(parsed) {\n    if (parsed === undefined) {\n        parsed = clean();\n    }\n    \n    return parsed;\n};\n\nvar parse = function (args) {\n    var parsed = clean(args);\n    return setDefaults(parsed);\n};\n\nexports.defaults = setDefaults;\nexports.has = has;\nexports.raw = raw;\nexports.parse = parse;\nexports.shorts = shorts;\nexports.known = known;\nexports.usage = usage;\n","/home/travis/build/npmtest/node-npmtest-npm-license/node_modules/npm-license/lib/stack.js":"/*\nCopyright (c) 2012, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\nvar Stack = function () {\n    this.errors   = [];\n    this.finished = 0;\n    this.results  = [];\n    this.total    = 0;\n};\n\nStack.prototype = {\n    add: function (fn) {\n        var self  = this,\n            index = self.total;\n\n        self.total += 1;\n\n        return function (err) {\n            if (err) { self.errors[index] = err; }\n\n            self.finished += 1;\n            self.results[index] = fn.apply(null, arguments);\n            self.test();\n        };\n    },\n\n    test: function () {\n        if (this.finished >= this.total && this.callback) {\n            this.callback.call(null, this.errors.length ? this.errors : null,\n                    this.results, this.data);\n        }\n    },\n\n    done: function (callback, data) {\n        this.callback = callback;\n        this.data     = data;\n        this.test();\n    }\n};\n\nexports.Stack = Stack;\n"}